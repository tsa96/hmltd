#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("hmltd:server");
const http = require("http");
const getUserData = require("../get_user_data").fetchAll;

(async () => {
  console.log("Fetching GSheet data");
  await getUserData();
  console.log("Done fetching, showtime baby");

  const port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);
 
  const server = http.createServer(app);
  server.listen(port);
  server.on("error", () => onError(port));
  server.on("listening", () => onListening(server));
  console.log("Created HTTP server, listening...");
})();

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) return val;

  if (port >= 0) return port;

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error, port) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
